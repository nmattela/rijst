(defpoll date :interval "1s" `date +%Y-%m-%d`)
(defpoll time :interval "1s" `date +%H:%M:%S`)

(defpoll network-icon :interval "1s" "scripts/network --icon")
(defpoll network-status :interval "1s" "scripts/network --status")
(defpoll network-class :interval "1s" "scripts/network --class")
(defpoll bluetooth-icon :interval "1s" "scripts/bluetooth --icon")
(defpoll bluetooth-status :interval "1s" "scripts/bluetooth --status")
(defpoll bluetooth-class :interval "1s" "scripts/bluetooth --class")
(defpoll bluetooth-battery :interval "1s" "scripts/bluetooth --battery")
(defpoll airplane-icon :interval "1s" "scripts/airplane --icon")
(defpoll airplane-status :interval "1s" "scripts/airplane --status")
(defpoll dnd-status :interval "1s" "scripts/dnd --status")
(defpoll dnd-icon :interval "1s" "scripts/dnd --icon")
(defpoll redshift-icon :interval "1s" "[ $(pidof redshift) ] && echo '󰛨' || echo '󰹏'")
(defpoll redshift-status :interval "1s" "[ $(pidof redshift) ] && echo 'Turned on' || echo 'Turned off'")
(defpoll volume-status :interval "1s" "scripts/volume --status")
(defpoll volume-icon :interval "1s" "scripts/volume --icon")
(defpoll image :interval "100h" "scripts/details --image")
(defpoll name :interval "100h" "scripts/details --name")
(defpoll battery-color :interval "5s" "scripts/battery --color")
(defpoll battery-icon :interval "5s" "scripts/battery -i")
(defpoll battery-label :interval "5s" "scripts/battery -l")
(defpoll battery-available :interval "5s" "scripts/battery -a")
(defpoll tips :interval "100h" "scripts/tips/tips")
(defpoll tips-icon :interval "1s" "scripts/tips/toggle-tips --icon")
(defpoll tips-status :interval "1s" "scripts/tips/toggle-tips --status")
(defpoll battery-class :interval "1s" "scripts/battery -c")
(defpoll profiles-icon :interval "1s" "scripts/power-profile --icon")
(defpoll profiles-mode :interval "1s" "scripts/power-profile --mode")
(defpoll workspaces-list :interval "1s" "scripts/workspaces --list")

(defwindow bar-left
  :exclusive true
  :monitor 0
  :stacking "overlay"
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "50px"
                      :anchor "top center")
  (bar-segment
    :name "top-left"
    (workspaces)))

(defwindow bar-center
  :exclusive true
  :monitor 0
  :stacking "bottom"
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "50px"
                      :anchor "top center")
  (bar-segment
    :name "top-center"
    (clock)))

(defwindow bar-right
  :exclusive true
  :monitor 0
  :stacking "bottom"
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height ""
                      :anchor "top center")
  (bar-segment
    :name "top-right"
    (icons) (power-button)))

(defwidget bar-segment [name]
  (box :class "bar-segment ${name}"
       :space-evenly true
       :width 5
       (children)))

(defwidget workspaces []
  (box
    :class "workspaces"
    :spacing 5
    (for workspace in workspaces-list
      (button
        :class "workspace ${workspace.active ? "workspace-active" : workspace.used ? "workspace-used" : "workspace-unused"}"
        ""
      )
    )
  )
)

(defwidget clock []
  (box
    :class "clock"
    "${time}"
  )
)

(defwidget icons []
  (box
    :class "icons"
    :spacing 5
    (wifi) (bluetooth) (battery) (volume) (expand)
  )
)

(defwidget wifi []
  (box
    :class "${network-status == "Disconnected" ? "network-err" : "wifi-icon"} icon"
    :tooltip "${network-status}"
    "${network-icon}"
  )
)

(defwidget bluetooth []
  (box
    :class "icon ${bluetooth-status == "Off" ? "" : "bluetooth-icon"}"
    :tooltip "${bluetooth-battery}"
    "${bluetooth-icon}")
)

(defwidget battery []
  (box
    :class "icon ${battery-available ? "battery-icon" : ""}"
    :style "background-color: ${battery-color};"
    "${battery-icon}"
  )
)

(defwidget volume []
  (box
    :class "icon"
    "${volume-icon}"
  )
)

(defwidget expand []
  (button
    :class "icon expand-icon"
    :valign "center"
    :halign "center"
    ""
  )
)

(defwidget power-button []
  (button
    :class "icon power-button-icon"
    "⏻"
  )
)